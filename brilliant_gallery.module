<?php
/* $Id$ */


/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/
function brilliant_gallery_help($section='') {

  $output = '';

  switch ($section) {
    case "admin/help#brilliant_gallery":
      $output = '<p>'.  t("Highly customizable Drupal module creating a table gallery of quality-scaled images from any number of folders."). '</p>';
      break;
  }

  return $output;
} // function brilliant_gallery_help


/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function brilliant_gallery_perm() {

return array('access brilliant_gallery'); #, 'administer brilliant_gallery'

} // function brilliant_gallery_perm


/**
* Generate HTML for the Brilliant gallery block
* @param op the operation from the URL
* @param delta offset
* @returns block HTML
*/
function brilliant_gallery_block($op='list', $delta=0) {
  // listing of blocks, such as on the admin/block page
  if ($op == "list") {
    $block[0]["info"] = t("Brilliant gallery");
    return $block;
  } else if ($op == 'view') {
  // our block content
    // content variable that will be returned for display
    $block_content = '';

    #$block_content .= l($links->title, 'node/'.$links->nid) . '<br />';
    #$block_content .= l('vacilando', 'http://www.vacilando.org') . '<br />';

    $block_content .= render_brilliant_gallery();
    
    // set up the block
    $block['subject'] = 'Brilliant gallery';
    $block['content'] = $block_content;
    return $block;
  }
} // end brilliant_gallery_block


function brilliant_gallery_all() {
  // content variable that will be returned for display
  $page_content = '';

  $page_content .= render_brilliant_gallery();

  return $page_content;
}


function brilliant_gallery_admin() {
  $form['brilliant_gallery_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to the main gallery folder'),
    '#default_value' => variable_get('brilliant_gallery_folder', ''),
    '#size' => 50,
    '#maxlength' => 100,
    '#description' => t("Path to the main folder in which your individual gallery folders will be placed. This folder must exist under your 'files' folder. Exclude trailing slashes. Example: <i>albums</i>")
  );
  $form['brilliant_gallery_maxcol'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of table columns'),
    '#default_value' => variable_get('brilliant_gallery_maxcol', 5),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The maximum number of columns displayed in the table.")
  );
  $form['brilliant_gallery_maximagewidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum width of table images'),
    '#default_value' => variable_get('brilliant_gallery_maximagewidth', 150),
    '#size' => 3,
    '#maxlength' => 4,
    '#description' => t("The maximum width of thumbnails in the table (height calculated automatically).")
  );
  $form['brilliant_gallery_bcgcolour'] = array(
    '#type' => 'textfield',
    '#title' => t('Table background colour'),
    '#default_value' => variable_get('brilliant_gallery_bcgcolour', '#000000'),
    '#size' => 8,
    '#maxlength' => 7,
    '#description' => t("Colour on the background of the table that holds the images.")
  );
  $form['brilliant_gallery_padding'] = array(
    '#type' => 'textfield',
    '#title' => t('Table cell padding'),
    '#default_value' => variable_get('brilliant_gallery_padding', 3),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("Cell padding (around each image) in pixels.")
  );
  $form['brilliant_gallery_overbrowser'] = array(
    '#type' => 'select',
    '#title' => t('Overlay browser'),
    '#required' => FALSE,
    '#options' => array(
      'lightbox' => t('Lightbox'),
      'thickbox' => t('Thickbox'),
      'greyboxr' => t('Greybox Redux'),
      'none' => t('None'),
    ),
    '#default_value' => variable_get('brilliant_gallery_overbrowser', 'thickbox'),
    '#description' => t('Select the overlay image browser (must be installed, of course).'),
  );
  $form['brilliant_gallery_maxwidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum width of full image'),
    '#default_value' => variable_get('brilliant_gallery_maxwidth', '1000'),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t("Very large images will be scaled down to this width (in pixels) for display before they get displayed by the overlay browser.")
  );
  return system_settings_form($form);
}

# Probably not the right way of doing it but it works...
  function brilliant_gallery_perms() {
           header("HTTP/1.1 301 Moved Permanently");
           header("Location: " . url("admin/user/access", NULL, "module-brilliant_gallery", TRUE));
           exit();
         }

function brilliant_gallery_menu() {

  $items = array();

  $items[] = array(
    'path' => 'admin/settings/brilliant_gallery',
    'title' => t('Brilliant gallery'),
    'description' => t('Brilliant gallery module settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'brilliant_gallery_admin',
    'access' => user_access('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  # Probably not the right way of doing it but it works...
    $items[] = array(
      'path' => 'admin/settings/brilliant_gallery/brilliant_gallery_perms',
      #'path' => 'admin/user/access#module-brilliant_gallery',
      'title' => t('Configure permissions'),
      'description' => t('Configure access permissions for the Brilliant gallery module'),
      'callback' => 'brilliant_gallery_perms',
      #'callback arguments' => 'brilliant_gallery_perms',
      'access' => user_access('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
     );

  $items[] = array(
    'path' => 'brilliant_gallery',
    'title' => t('Brilliant gallery'),
    'callback' => 'brilliant_gallery_all',
    'access' => user_access('access brilliant_gallery'),
    'type' => MENU_CALLBACK
  ); # The type MENU_CALLBACK tells Drupal to not display the link in the user's menu, just use this function when the URL is accessed. Use MENU_NORMAL_ITEM if you want the user to see the link in the side navigation block.
     
  return $items;
}


function render_brilliant_gallery( $thisfolder = '', $colcountoverride = '', $widthoverride = '' ) {
        $result = '';
        $galleryfolder = variable_get('brilliant_gallery_folder', '');
        if ( substr( $galleryfolder, strlen( $galleryfolder ) - 1, 1 ) == '/' or substr( $galleryfolder, 0, 1 ) == '/' ) {
             #watchdog('error', 'failed to notify "weblogs.com" (site)');
             #form_set_error('yemail', t('Header injection attempt detected.  Do not enter line feed characters into the from field!'));
             return 'Main gallery folder path must not begin or end with a slash; please fix it in the <a href="/admin/settings/brilliant_gallery">settings page</a>.';
           }
        if ( $thisfolder <> '' ) {
             $galleryfolder .= '/' . $thisfolder;
           }
        if ( $colcountoverride == '' ) {
             $columns = variable_get('brilliant_gallery_maxcol', 3);
           } else {
             $columns = $colcountoverride;
           }
        if ( $widthoverride == '' ) {
             $imagewidth = variable_get('brilliant_gallery_maximagewidth', 150);
           } else {
             $imagewidth = $widthoverride;
           }
        $bgcolour = variable_get('brilliant_gallery_bcgcolour', '#000000');
        $padding = variable_get('brilliant_gallery_padding', 3);
        $overbrowser = variable_get('brilliant_gallery_overbrowser', 'thickbox');
        $fullresolutionmaxwidth = variable_get('brilliant_gallery_maxwidth', '1000'); # Totally full resolution display would be impractical, so this is the maximum width of "full" resolution.
        $path = url(file_directory_path() . '/' . $galleryfolder, NULL, NULL, TRUE);
        # Non-clean URLs need removing ?q=
          $path = str_replace( "?q=", "",  $path );
        $absolpath = realpath(file_directory_path() . '/' . $galleryfolder);
        #$result .= $absolpath;

        # Load Directory Into Array  
          $poct = -1;
          $retval = array(); # Thanks to Micha≈Ç Albrecht!
          $handle = opendir($absolpath);
          while ( $file = readdir($handle) ) {
                  $poct += 1;
                  $testending = strtolower( substr( $file, -4, 4 ) );
                  if (  strtolower( $testending ) <> '.jpg' and strtolower( $testending ) <> 'jpeg' and strtolower( $testending ) <> '.gif' and strtolower( $testending ) <> '.png' and strtolower( $testending ) <> '.mpg' and strtolower( $testending ) <> '.swf' ) { continue; }
                  $retval[$poct] = $file;
                }
          closedir( $handle );
          $maxpoct = count( $retval );
          sort( $retval );
          #print_r( $retval );

        $column_count = 0;
        $pocetobr = 0;
        $setname = mt_rand( 1, 9999999 );
        $result .= '<!-- Brilliant Gallery Table Beginning --><table border="0" rules="none" frame="box" cellpadding="0" cellspacing="0" bordercolor="' . $bgcolour . '"';
        if ( $thisfolder <> '' ) {
             $result .= ' align="center"';
           }
        $result .= ' style="width:' . $columns*$imagewidth . 'px;">'; #cell-spacing: 5px;
        for ( $poct = 1; $poct <= $maxpoct; $poct++ ) {
               $fullimgpath = $path . '/' . $retval[$poct-1];
               if ($column_count == 0) { $result .= ('<tr>'); }
               $result .= ('<td align="center" bgcolor="' . $bgcolour . '" style="padding: ' . $padding . 'px ' . $padding . 'px ' . $padding . 'px ' . $padding . 'px;vertical-align: middle;">');
                    $pocetobr += 1;
                    if ( substr( strtolower( $retval[$poct-1] ), -4, 4 ) == ".jpg" or substr( strtolower( $retval[$poct-1] ), -5, 5 ) == ".jpeg" or substr( strtolower( $retval[$poct-1] ), -4, 4 ) == ".gif" or substr( strtolower( $retval[$poct-1] ), -4, 4 ) == ".png" ) {
                         $smallenough = false;
                         # Is image horizontally or vertically oriented?
                           $temp = getimagesize( $absolpath . '/' . $retval[$poct-1] );
                           if ( ( $temp[0] - $temp[1] ) >= 0 ) {
                                # this is a horizontal image
                                $imgw = $imagewidth;
                                $imgh = round( ($temp[1]/$temp[0]) * $imagewidth );
                                if ( $temp[0] > $fullresolutionmaxwidth ) {
                                     $imgwbig = $fullresolutionmaxwidth;
                                     $imghbig = round( ($temp[1]/$temp[0]) * $fullresolutionmaxwidth );
                                   } else {
                                     $smallenough = true;
                                   }
                                #$result .= $imgw . ' / ' . $imgh;
                              } else {
                                # this is a vertical image .... a
                                $imgw = round( ($temp[0]/$temp[1])*($temp[0]/$temp[1])*$imagewidth );
                                $imgh = round( ($temp[0]/$temp[1])*$imagewidth );
                                if ( $temp[0] > $fullresolutionmaxwidth ) {
                                     $imgwbig = round( ($temp[0]/$temp[1])*($temp[0]/$temp[1])*$fullresolutionmaxwidth );
                                     $imghbig = round( ($temp[0]/$temp[1])*$fullresolutionmaxwidth );
                                   } else {
                                     $smallenough = true;
                                   }
                                #$result .= $imgw . ' / ' . $imgh;
                              }
                         if ( $smallenough === true ) {
                              $result .= '<a href="' . $fullimgpath . '"';
                            } else {
                              # Important to begin with the "/" otherwise thumbnails in non-root folders fail. See http://drupal.org/node/175292
                              $modulepath = url(drupal_get_path('module', 'brilliant_gallery'), NULL, NULL, TRUE);
                              # Non-clean URLs need removing ?q=
                                $modulepath = str_replace( "?q=", "",  $modulepath );
                              $result .= '<a href="' . $modulepath .'/image.php?imgp=' . base64_encode( $absolpath . '/' . $retval[$poct-1] ) . '&imgw=' . $imgwbig . '&imgh=' . $imghbig . '"'; #&dummy=.jpg
                            }

                         switch( $overbrowser ) {
                           case 'thickbox':
                             $result .= ' class="thickbox"';
                             $result .= ' rel="img_' . $setname . '"';
                             #$attributes['class'] = $link_class;
                             #$attributes['rel'] = 'img_' . ($node->nid? $node->nid: time()); // 'insert' has no $node->nid
                             break;
                           case 'lightbox':
                             $result .= ' rel="lightbox[' . $setname . ']"';
                             #$attributes['rel'] = 'lightbox[' . ($node->nid? $node->nid: time()) . ']'; // 'insert' has no $node->nid
                             break;
                           case 'greyboxr':
                             $result .= ' class="greybox"';
                             #$result .= ' rel="gb_imageset[' . $setname . ']"';
                             break;
                           default:
                             break;
                         }

                         $result .= '>';
                         # Important to begin with the "/" otherwise thumbnails in non-root folders fail. See http://drupal.org/node/175292
                         $modulepath = url(drupal_get_path('module', 'brilliant_gallery'), NULL, NULL, TRUE);
                         # Non-clean URLs need removing ?q=
                           $modulepath = str_replace( "?q=", "",  $modulepath );
                         $result .= '<img style="display: block;border:0" src="' . $modulepath .'/image.php?imgp=' . base64_encode( $absolpath . '/' . $retval[$poct-1] ) . '&imgw=' . $imgw . '&imgh=' . $imgh . '" />'; # width="' . $imgw . '"
                         $result .= '</a>';

                       } else {
                         $result .= '<a href="' . $fullimgpath . '">';
                         $result .= '<center>' . $retval[$poct-1] . '</center>';
                         $result .= '</a>';

                       }
                    $result .= '</td>';

               $column_count += 1;
               if ($column_count == $columns) { $result .= ("</tr>"); $column_count = 0; }
               }
         if ($column_count <> 0) { $result .= ("</tr>"); }
         if ( $loggedin === true ) {
              $result .= '<tr><td colspan="' . $maxpoct . '"><div align="right"><input type="submit" value="Submit favourite image rating"</div></td></tr>';
            }
         $result .= "</table>"; 
         return $result;
   }

# Implementation of hook_filter().
function brilliant_gallery_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'no cache':
      return FALSE;

    case 'list':
      return array(0 => t('Brilliant Gallery Tag'));

    case 'description':
      return t('Substitutes a special Brilliant Gallery Tag with the actual gallery table.');

    case 'prepare':
      return $text;

    case 'process':
      # process it here........
      $text = replace_brilliant_gallery_tags( $text );
      return $text;
  }
} 


function replace_brilliant_gallery_tags( $str ) {
         # [bg|path/to/gallery_folder|colcountoverride|widthoverride]
           # no slashes around this path!
         $matchlink = '';
         $orig_match = '';
         preg_match_all( "/(\[)bg(\|).*(\])/", $str, $matches);
         foreach ( $matches[0] as $match ) {
                   $orig_match[] = $match;
                   $match = substr( $match, 1, ( strlen( $match ) - 2 ) );
                   $match = explode( "|", $match );
                   $matchlink[] = render_brilliant_gallery( $match[1], $match[2], $match[3] );
                 }
         $str = str_replace( $orig_match, $matchlink, $str );
         return $str;
       }


/**
 * Implementation of hook_filter_tips().
 *
 * This hook allows filters to provide help text to users during the content
 * editing process. Short tips are provided on the content editing screen, while
 * long tips are provided on a separate linked page. Short tips are optional,
 * but long tips are highly recommended.
 */
/*
function brilliant_gallery_filter_tips($delta, $format, $long = FALSE) {
  switch ($delta) {
    case 0:
      if ($long) {
        return t('Every instance of "foo" in the input text will be replaced with "%replacement".', array('%replacement' => variable_get('filter_example_foo_'. $format, 'bar')));
      }
      break;

    case 1:
      if ($long) {
        return t('Every instance of the special &lt;time /&gt; tag will be replaced with the current date and time in the user\'s specified time zone.');
      }
      else {
        return t('Use &lt;time /&gt; to display the current date/time.');
      }
      break;
  }
}
*/
?>